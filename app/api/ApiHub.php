<?php
/**
 * Created by PhpStorm.
 * User: a
 * Date: 2017/8/14
 * Time: 12:03
 */

namespace app\api;


use app\api\Dao\BasicRoomDao;
use app\api\GraphQL\ExtType\PageInfo;
use Tiny\Abstracts\AbstractApi;
use Tiny\Exception\AuthError;
use Tiny\Util as Func;
use Tiny\OrmQuery\Q;

class ApiHub extends AbstractApi
{

    protected static $detail_log = true;

    public function beforeAction(array $params)
    {
        $params = parent::beforeAction($params); // TODO: Change the autogenerated stub
        if (isset($params['name'])) {
            $params['name'] = trim(strval($params['name']));
        }

        if (Func::stri_cmp('testSum', $this->_getActionName())) {
            $params['a'] = intval($params['a']);
            $params['b'] = intval($params['b']);
        }

        if (isset($params['id'])) {
            $params['id'] = intval($params['id']);
        }

        if (isset($params['page'])) {
            $params['page'] = $params['page'] > 1 ? intval($params['page']) : 1;
        }
        if (isset($params['num'])) {
            $params['num'] = $params['num'] > 1 ? intval($params['num']) : 20;
        }

        return $params;
    }

    /**
     * api hello
     * @param string $name
     * @return array
     */
    public function hello($name = 'world')
    {
        $msg = "test log name={$name}";
        self::debug($msg, __METHOD__, __CLASS__, __LINE__);
        self::info($msg, __METHOD__, __CLASS__, __LINE__);
        self::warn($msg, __METHOD__, __CLASS__, __LINE__);
        self::error($msg, __METHOD__, __CLASS__, __LINE__);
        self::fatal($msg, __METHOD__, __CLASS__, __LINE__);

        return ['info' => "Hello, {$name}!"];
    }

    public function testError($id)
    {
        if ($id <= 0) {
            throw new AuthError('id must gt 0');
        }
        return ['id' => $id, 'info' => 'some info'];
    }

    /**
     * test sum
     * @param int $a
     * @param int $b
     * @return array
     */
    public function testSum($a, $b)
    {
        $sum = $a + $b;
        $msg = "test log a={$a} b={$b}, sum={$sum}";
        self::debug($msg, __METHOD__, __CLASS__, __LINE__);
        self::info($msg, __METHOD__, __CLASS__, __LINE__);
        self::warn($msg, __METHOD__, __CLASS__, __LINE__);
        self::error($msg, __METHOD__, __CLASS__, __LINE__);
        self::fatal($msg, __METHOD__, __CLASS__, __LINE__);
        return ['data' => $sum];
    }


    public function testOrm($room_id = 101)
    {
        $roomInfo = BasicRoomDao::getOneById($room_id, 0);
        return ['room' => $roomInfo];
    }

    public function testPluck()
    {
        $list = BasicRoomDao::tableBuilder()->pluck('room_id');
        return ['list' => $list];
    }

    public function testPluck2()
    {
        $list = BasicRoomDao::tableBuilder()->pluck('room_id', 'chat_topic');
        return ['list' => $list];
    }

    public function testQuery($page = 0, $num = 20, array $sort_option = ['room_id', 'asc'], $room_id = 0, array $room_id_list = [], $room_title = '')
    {
        $skip = ($page - 1) * $num;

        $where = [
            'room_id#_one_' => Q::where($room_id, '=', function () use ($room_id) {
                return is_integer($room_id) && $room_id > 0;
            }),
            'room_id#_muti_' => Q::whereIn($room_id_list, function () use ($room_id_list) {
                return is_array($room_id_list) && !empty($room_id_list);
            }),
            'room_title#_like_' => Q::where("%{$room_title}%", 'like', function () use ($room_title) {
                return !empty($room_title);
            }),
        ];

        $total = BasicRoomDao::countItem($where);
        $list = BasicRoomDao::selectItem($skip, $num, $sort_option, $where);

        $rst = ['list' => $list, 'total' => $total, 'pageInfo' => PageInfo::buildPageInfo($total, $num, $page)];
        self::$detail_log && self::debugArgs(func_get_args(), __METHOD__, __CLASS__, __LINE__);
        self::$detail_log && self::debugResult($rst, __METHOD__, __CLASS__, __LINE__);
        return $rst;
    }

}